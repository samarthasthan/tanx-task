// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package sqlc

import (
	"context"
	"time"
)

const createAccount = `-- name: CreateAccount :exec
INSERT INTO Users (UserID, Name, Email, Password)
VALUES (?,?,?,?)
`

type CreateAccountParams struct {
	Userid   string
	Name     string
	Email    string
	Password string
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) error {
	_, err := q.db.ExecContext(ctx, createAccount,
		arg.Userid,
		arg.Name,
		arg.Email,
		arg.Password,
	)
	return err
}

const createAlert = `-- name: CreateAlert :exec
INSERT INTO Alerts (AlertID, UserID, Curreny, Price) VALUES (?,?,?,?)
`

type CreateAlertParams struct {
	Alertid string
	Userid  string
	Curreny string
	Price   string
}

func (q *Queries) CreateAlert(ctx context.Context, arg CreateAlertParams) error {
	_, err := q.db.ExecContext(ctx, createAlert,
		arg.Alertid,
		arg.Userid,
		arg.Curreny,
		arg.Price,
	)
	return err
}

const createVerification = `-- name: CreateVerification :exec
INSERT INTO Verifications (VerificationId, UserID, OTP, ExpiresAt)
VALUES (?,?,?,?)
`

type CreateVerificationParams struct {
	Verificationid string
	Userid         string
	Otp            int32
	Expiresat      time.Time
}

func (q *Queries) CreateVerification(ctx context.Context, arg CreateVerificationParams) error {
	_, err := q.db.ExecContext(ctx, createVerification,
		arg.Verificationid,
		arg.Userid,
		arg.Otp,
		arg.Expiresat,
	)
	return err
}

const deleteAlert = `-- name: DeleteAlert :exec
UPDATE Alerts SET Status = 'deleted' WHERE AlertID = ?
`

func (q *Queries) DeleteAlert(ctx context.Context, alertid string) error {
	_, err := q.db.ExecContext(ctx, deleteAlert, alertid)
	return err
}

const deleteVerification = `-- name: DeleteVerification :exec
DELETE FROM Verifications WHERE UserID = ?
`

func (q *Queries) DeleteVerification(ctx context.Context, userid string) error {
	_, err := q.db.ExecContext(ctx, deleteVerification, userid)
	return err
}

const getAlerts = `-- name: GetAlerts :many
SELECT a.AlertID, a.UserID, a.Curreny, a.Price, a.Status, a.CreatedAt, a.UpdatedAt, u.Email
FROM Alerts a
JOIN Users u ON a.UserID = u.UserID
WHERE a.Status = 'created'
`

type GetAlertsRow struct {
	Alertid   string
	Userid    string
	Curreny   string
	Price     string
	Status    string
	Createdat time.Time
	Updatedat time.Time
	Email     string
}

func (q *Queries) GetAlerts(ctx context.Context) ([]GetAlertsRow, error) {
	rows, err := q.db.QueryContext(ctx, getAlerts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAlertsRow
	for rows.Next() {
		var i GetAlertsRow
		if err := rows.Scan(
			&i.Alertid,
			&i.Userid,
			&i.Curreny,
			&i.Price,
			&i.Status,
			&i.Createdat,
			&i.Updatedat,
			&i.Email,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAlertsByUser = `-- name: GetAlertsByUser :many
SELECT AlertID, UserID, Curreny, Price, Status, CreatedAt, UpdatedAt FROM Alerts WHERE UserID = ?
`

type GetAlertsByUserRow struct {
	Alertid   string
	Userid    string
	Curreny   string
	Price     string
	Status    string
	Createdat time.Time
	Updatedat time.Time
}

func (q *Queries) GetAlertsByUser(ctx context.Context, userid string) ([]GetAlertsByUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getAlertsByUser, userid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAlertsByUserRow
	for rows.Next() {
		var i GetAlertsByUserRow
		if err := rows.Scan(
			&i.Alertid,
			&i.Userid,
			&i.Curreny,
			&i.Price,
			&i.Status,
			&i.Createdat,
			&i.Updatedat,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOTP = `-- name: GetOTP :one
SELECT OTP, ExpiresAt FROM Verifications WHERE UserID = ?
`

type GetOTPRow struct {
	Otp       int32
	Expiresat time.Time
}

func (q *Queries) GetOTP(ctx context.Context, userid string) (GetOTPRow, error) {
	row := q.db.QueryRowContext(ctx, getOTP, userid)
	var i GetOTPRow
	err := row.Scan(&i.Otp, &i.Expiresat)
	return i, err
}

const getPasswordByEmail = `-- name: GetPasswordByEmail :one
SELECT Password FROM Users WHERE Email = ?
`

func (q *Queries) GetPasswordByEmail(ctx context.Context, email string) (string, error) {
	row := q.db.QueryRowContext(ctx, getPasswordByEmail, email)
	var password string
	err := row.Scan(&password)
	return password, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT UserID, Name, Email, Password FROM Users WHERE Email = ?
`

type GetUserByEmailRow struct {
	Userid   string
	Name     string
	Email    string
	Password string
}

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (GetUserByEmailRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(
		&i.Userid,
		&i.Name,
		&i.Email,
		&i.Password,
	)
	return i, err
}

const getUserIDByEmail = `-- name: GetUserIDByEmail :one
SELECT UserID FROM Users WHERE Email = ?
`

func (q *Queries) GetUserIDByEmail(ctx context.Context, email string) (string, error) {
	row := q.db.QueryRowContext(ctx, getUserIDByEmail, email)
	var userid string
	err := row.Scan(&userid)
	return userid, err
}

const updateAlertStatus = `-- name: UpdateAlertStatus :exec
UPDATE Alerts SET Status = ? WHERE AlertID = ?
`

type UpdateAlertStatusParams struct {
	Status  string
	Alertid string
}

func (q *Queries) UpdateAlertStatus(ctx context.Context, arg UpdateAlertStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateAlertStatus, arg.Status, arg.Alertid)
	return err
}

const verifyAccount = `-- name: VerifyAccount :exec
UPDATE Users SET IsVerified = 1 WHERE UserID = ?
`

func (q *Queries) VerifyAccount(ctx context.Context, userid string) error {
	_, err := q.db.ExecContext(ctx, verifyAccount, userid)
	return err
}
